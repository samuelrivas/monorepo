//Copyright (C) 2018 by Samuel Rivas <samuelrivas@gmail.com>

/* This adds a single line transaction to setup the current state of an
   asset. It is meant to be used for banks where getting full history of
   transactions in a feasible format is not possible, so that a base state can
   be set by hand */

#include <string>
#include <iostream>
#include <sstream>
#include <libgen.h>
#include <vector>
#include <boost/format.hpp>

#include "lib/sha1.hpp"

constexpr int FIX_POINT_PRECISION = 10;

using std::string;
using std::vector;
using std::endl;
using std::cout;
using std::cerr;
using std::ostringstream;
using boost::format;

vector<string> split(const string& in, char sep) {
  int start = 0;
  vector<string> out;

  for (size_t i = 0; i < in.size(); i++) {
    if (in[i] == sep) {
      out.push_back(in.substr(start, i - start));
      start = i + 1;
    }
  }
  out.push_back(in.substr(start, in.size() - start));
  return out;
}

// We use 10 decimals fixed point for amounts
string to_fixed_point(const string& amount) {
  ostringstream out;
  bool after_comma = false;
  int trailing_zeroes = FIX_POINT_PRECISION;

  for (char c : amount) {
    if (c == ',') {
      after_comma = true;
    } else {
      out << c;
      if (after_comma) {
        trailing_zeroes--;
      }
    }
  }

  assert(trailing_zeroes >= 0);

  while (trailing_zeroes-- > 0) {
    out << '0';
  }
  return out.str();
}

string transaction_line(const string& transaction_id,
                        const string& date,
                        const string& raw_line) {
  ostringstream out;
  out << "INSERT INTO transactions (id, date, raw) VALUES "
      << format("(\"%s\",\"%s\",\"%s\");\n")
    % transaction_id
    % date
    % raw_line;

  return out.str();
}

string movement_line(const string& date,
                     const string& asset,
                     const string& account,
                     const string& bank,
                     const string& amount,
                     const string& transaction_id) {
  format id_format("%s;%s;%s;%s;%s");
  string movement_id = sha1(str(id_format % date % asset % account % amount
                                % transaction_id));
  ostringstream out;
  out << "INSERT INTO movements "
    "(id, date, asset, account, bank, amount, decimals, trans_id) VALUES "

      << format("(\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",%s,%s,\"%s\");\n")
    % movement_id
    % date
    % asset
    % account
    % bank
    % to_fixed_point(amount)
    % FIX_POINT_PRECISION
    % transaction_id;

  return out.str();
}

int main(int argc, char* argv[]) {

  if (argc != 6) {
    cerr << "Say what!?\n";
    return 1;
  }

  (void) argc;
  (void) argv;

  string date { argv[1] };
  string bank { argv[2] };
  string account { argv[3] };
  string asset = { argv[4] };
  string amount = { argv[5] };

  string raw_line = (format("generated by %s;%s;%s;%s;%s;%s")
                     % basename(argv[0])
                     % date
                     % bank
                     % account
                     % asset
                     % amount).str();

  string transaction_id = sha1(raw_line);
  cout << transaction_line(transaction_id, date, raw_line);
  cout << movement_line(date, asset, account, bank, amount, transaction_id);
  return 0;
}
