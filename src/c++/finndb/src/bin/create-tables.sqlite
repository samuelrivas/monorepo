CREATE TABLE movements (
       id STRING UNIQUE PRIMARY KEY,
       date STRING,
       asset STRING,
       account STRING,
       bank STRING,
       amount INTEGER,
       decimals INTEGER,
       trans_id STRING,
       FOREIGN KEY(trans_id) REFERENCES transactions(id));

CREATE TABLE transactions (
       id STRING UNIQUE PRIMARY KEY,
       date STRING,
       raw STRING);

CREATE TABLE valuations (
       date STRING,
       asset STRING,
       amount INTEGER,
       decimals INTEGER,
       PRIMARY KEY(date, asset)
       FOREIGN KEY(asset) REFERENCES asset_info(asset));

CREATE TABLE asset_info (
       asset STRING UNIQUE PRIMARY KEY,
       currency STRING,
       type STRING);

/* Views */
CREATE VIEW assets_by_account (account, bank, asset, amount, decimals) AS
  SELECT account, bank, asset, sum(amount) as SUM, 10
  FROM movements
  GROUP BY asset, account
  HAVING SUM != 0;

CREATE VIEW latest_valuations (date, asset, currency, amount, decimals) AS
  SELECT max_dates.date, info.asset, info.currency, val.amount, val.decimals FROM

  (
    SELECT MAX(date) AS date, asset FROM valuations
    GROUP BY asset
  ) AS max_dates

  INNER JOIN valuations AS val
  ON val.date = max_dates.date AND val.asset = max_dates.asset

  INNER JOIN asset_info as info
  ON max_dates.asset = info.asset;

CREATE VIEW current_value
  (value_date, account, bank, asset, amount, rate, currency, value, decimals) AS
  SELECT v.date as value_date, a.account, a.bank, a.asset,
    a.amount/10000000000.0 as amount,
    v.amount/10000000000.0 as rate,
    v.currency,
    CAST((a.amount * v.amount) / 10000000000 AS int) AS value,
    10 as decimals

  FROM assets_by_account AS a

  LEFT JOIN latest_valuations AS v
  ON a.asset = v.asset;

/* We need to sort on id after date to cover the cases with more than one
   movement per asset in the same day */
CREATE VIEW asset_rollup
  (date, account, bank, asset, amount, accumulated, decimals) AS
  SELECT m.date, m.bank, m.account, m.asset, m.amount,
   (SELECT SUM(aux.amount)
    FROM movements AS aux
    WHERE printf("%s%s", aux.date, aux.id) <= printf("%s%s", m.date, m.id)
         AND aux.asset = m.asset
         AND aux.account = m.account
         AND aux.bank = m.bank) AS accumulated,
   10 AS decimals

  FROM movements AS m
  ORDER BY m.date, m.id;

CREATE VIEW assets_without_info (asset, amount, decimals) AS
  SELECT asset, SUM(amount) as SUM, 10
  FROM movements
  WHERE asset NOT IN (SELECT asset FROM asset_info)
  GROUP BY asset
  HAVING SUM != 0;

/* Standard values */
INSERT into valuations (date, asset, amount, decimals) VALUES
("2000-01-01", "SEK", 10000000000, 10);
INSERT into valuations (date, asset, amount, decimals) VALUES
("2000-01-01", "NOK", 10000000000, 10);
INSERT into valuations (date, asset, amount, decimals) VALUES
("2000-01-01", "USD", 10000000000, 10);
INSERT into valuations (date, asset, amount, decimals) VALUES
("2000-01-01", "EUR", 10000000000, 10);
